package com.startinpoint.ssreport.serviceImpl;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
import com.startinpoint.ssreport.entity.SSReport;
import com.startinpoint.ssreport.main.Constants;
import com.startinpoint.ssreport.service.ExportExcelReportService;

public class ExportExcelReportServiceImpl implements ExportExcelReportService{
	public SSReport CalculateData(SSReport ss) {
		String filename=ss.getReportName();
			//prepare time and date
		String removepdf=filename.split("\\.")[0];
		String time=removepdf.substring(removepdf.lastIndexOf('_') + 1);
		String date=removepdf.substring(removepdf.lastIndexOf('_') -8,removepdf.lastIndexOf('_'));
		System.out.println(removepdf);
		System.out.println(time);
		System.out.println(date);
		ss.setReportTime(time);
		ss.setReportDate(date);
		//prepare duration
		String dateStart = ss.getSssStart();
		String dateStop = ss.getSssComplete();
		String calculatedDuration=calculateDuration(dateStart,dateStop);
		ss.setDuration(calculatedDuration);
		return ss;
	}
	public String calculateDuration(String dateStart,String dateStop){

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String diffDateTime = null;
		Date d1 = null;
		Date d2 = null;
		
		try {
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);
			
			//in milliseconds
			long diff = d2.getTime() - d1.getTime();

			//String diffSeconds = Long.toString(diff / 1000 % 60);
			String diffMinutes = Long.toString(diff / (60 * 1000) % 60);
			String diffHours = Long.toString(diff / (60 * 60 * 1000) % 24);
			String diffDays = Long.toString(diff / (24 * 60 * 60 * 1000));
			diffDateTime=diffDays+" "+diffHours+":"+diffMinutes;
			
			System.out.println(diffDateTime);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return diffDateTime;
	}
	public List<SSReport> PrepareDataToWrite(List<SSReport> ssList){
		List<SSReport> prepareSSReportList=new ArrayList<SSReport>();
		for(SSReport s:ssList){
			SSReport prepareSSReport = null;
			if(s.getReportName()!=null){
			prepareSSReport=CalculateData(s);
			}
			prepareSSReportList.add(prepareSSReport);
			System.out.println("Each EditedSSReport:"+prepareSSReport);
		}
		return prepareSSReportList;
	}
	private static String[] columns={Constants.reportName,Constants.reportDate,Constants.reportTime,Constants.sssID,Constants.sssStart,
			Constants.sssComplete,Constants.duration,Constants.category,Constants.remarks};
	@Override
	public String exportExcel(String filepath, String filename, List<SSReport> ssList) throws IOException {
		// Create a Workbook
        Workbook workbook = new XSSFWorkbook();
        // Create a Sheet
        Sheet sheet = workbook.createSheet(filename);
        // Create a Row
        Row headerRow = sheet.createRow(0);
        // Create cells
        for(int i = 0; i < columns.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(columns[i]);
        }
        int rowNum = 1;
        for(SSReport ss: ssList) {
            Row row = sheet.createRow(rowNum++);
            row.createCell(0).setCellValue(ss.getReportName());
            row.createCell(1).setCellValue(ss.getReportDate());
            row.createCell(2).setCellValue(ss.getReportTime());
            row.createCell(3).setCellValue(ss.getSssId());
            row.createCell(4).setCellValue(ss.getSssStart());
            row.createCell(5).setCellValue(ss.getSssComplete());
            row.createCell(6).setCellValue(ss.getDuration());
            row.createCell(7).setCellValue(ss.getCategory());
            row.createCell(8).setCellValue(ss.getRemarks());
        }
     // Resize all columns to fit the content size
        for(int i = 0; i < columns.length; i++) {
            sheet.autoSizeColumn(i);
        }
        // Write the output to a file
        FileOutputStream fileOut = new FileOutputStream(filepath+"\\"+filename+".xlsx");
        workbook.write(fileOut);
        fileOut.close();
        // Closing the workbook
        //workbook.close();
		return "Sucessfully exported excel";
    }
}
